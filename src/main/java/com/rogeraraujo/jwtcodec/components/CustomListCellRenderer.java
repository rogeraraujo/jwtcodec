/*
 * Copyright (c) 2021, Roger Ara√∫jo, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

package com.rogeraraujo.jwtcodec.components;

import lombok.Getter;

import javax.swing.*;
import java.awt.*;

/**
 * Customizes components used to render cells in visual controls such as
 * JComboBox and JList. This is done by acquiring a component, which can come
 * from the base renderer of a visual control or from the default functionality
 * of DefaultListCellRenderer, followed by customizing said component (or
 * replacing it altogether) through a transformer interface.
 */
public class CustomListCellRenderer extends DefaultListCellRenderer {
    /**
     * Transformer interface that allows to customize or replace a component
     * generated by the ListCellRenderer#getListCellRendererComponent() method.
     */
    public interface ComponentTransformer {
        Component transform(Component baseComponent, JList<?> list,
            Object value, int index, boolean isSelected, boolean cellHasFocus);
    }

    @Getter
    private final ListCellRenderer<Object> baseRenderer;

    @Getter
    private final ComponentTransformer componentTransformer;

    public CustomListCellRenderer(
            ListCellRenderer<Object> baseRenderer,
            ComponentTransformer componentTransformer) {
        this.baseRenderer = baseRenderer;
        this.componentTransformer = componentTransformer;
    }

    @Override
    public Component getListCellRendererComponent(JList<?> list,
            Object value, int index, boolean isSelected, boolean cellHasFocus) {
        Component result = (baseRenderer != null) ?
            baseRenderer.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus) :
            super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);

        if (componentTransformer != null) {
            result = componentTransformer.transform(
                result, list, value, index, isSelected, cellHasFocus);
        }

        return result;
    }

    /**
     * Transformer that applies a "striping" effect by using an alternate color
     * for the background of items displayed in even lines of visual controls
     * such as JComboBox and JList.
     */
    public static class AlternateRowColorTransformer
            implements ComponentTransformer {
        public static final Color DEFAULT_ALTERNATE_ROW_COLOR =
            new Color(200, 201, 210);

        @Getter
        private final Color alternateRowColor;

        public AlternateRowColorTransformer(Color alternateRowColor) {
            this.alternateRowColor = (alternateRowColor != null) ?
                alternateRowColor : DEFAULT_ALTERNATE_ROW_COLOR;
        }

        @Override
        public Component transform(Component baseComponent,
                JList<?> list, Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
            if (!isSelected && (index % 2 != 0)) {
                baseComponent.setBackground(alternateRowColor);
            }

            return baseComponent;
        }
    }
}
